@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger 
@rendermode @(new InteractiveServerRenderMode(false))
<PageTitle>Смена пароля</PageTitle>

<h3>Смена пароля</h3>

<div class="row">
    <div class="col-md-6">
        <RadzenTemplateForm Data="@Input" Submit="@((InputModel args) => { Submit(args); })">
            <RadzenFieldset Text="Смена пароля">
                <RadzenFormField Text="Старый пароль" Variant="Variant.Outlined" Style="width: 100%;margin-top: 0.5rem">
                    <Start>
                        <RadzenIcon Icon="pin"/>
                    </Start>
                    <ChildContent>
                        <RadzenPassword @bind-Value="Input.OldPassword" Placeholder="Старый пароль"/>
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Новый пароль" Variant="Variant.Outlined" Style="width: 100%;margin-top: 1.5rem">
                    <Start>
                        <RadzenIcon Icon="key"/>
                    </Start>
                    <ChildContent>
                        <RadzenPassword @bind-Value="Input.NewPassword" Placeholder="Новый пароль"/>
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Подтвердите новый пароль" Variant="Variant.Outlined" Style="width: 100%;margin: 1.5rem 0">
                    <Start>
                        <RadzenIcon Icon="key"/>
                    </Start>
                    <ChildContent>
                        <RadzenPassword @bind-Value="Input.ConfirmPassword" Placeholder="Подтвердите новый пароль"/>
                    </ChildContent>
                </RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Обновить пароль" Style="width: 100%;"/>
            </RadzenFieldset>
        </RadzenTemplateForm>
        @if (!string.IsNullOrEmpty(message))
        {
            <RadzenAlert Shade="Shade.Lighter" AlertStyle=@(message.Contains("Ошибка") ? AlertStyle.Danger : AlertStyle.Success) class="mt-4">@message</RadzenAlert>
        }
    </div>
</div>

@code {
    private string? message;
    private User user = default!;
    private bool hasPassword;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentUserAsync();
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task Submit(InputModel args)
    {
        if (string.IsNullOrEmpty(Input.OldPassword) || string.IsNullOrEmpty(Input.NewPassword) || string.IsNullOrEmpty(Input.ConfirmPassword))
        {
            message = "Ошибка: Все поля обязательны для заполнения.";
            return;
        }

        if (Input.NewPassword.Length < 5)
        {
            message = "Ошибка: Новый пароль должен содержать не менее 5 символов.";
            return;
        }

        if (Input.NewPassword != Input.ConfirmPassword)
        {
            message = "Ошибка: Новый пароль и подтверждение пароля не совпадают.";
            return;
        }

        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Ошибка: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        Logger.LogInformation("Пользователь " + user.UserName + " успешно поменял свой пароль!");
        message = "Ваш пароль успешно изменен!";
        await SignInManager.RefreshSignInAsync(user);
    }


    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string OldPassword { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)] public string ConfirmPassword { get; set; } = "";
    }

}