@page "/Account/Manage/ExternalLogins"

@using Manufacture.Core.Entities.Identity
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Manufacture.Infrastructure.Data

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<User> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Управление внешними входами</PageTitle>

<StatusMessage/>
@if (currentLogins?.Count > 0)
{
    <h3>Зарегистрированные входы</h3>
    <table class="table">
        <tbody>
        @foreach (var login in currentLogins)
        {
            <tr>
                <td>@login.ProviderDisplayName</td>
                <td>
                    @if (showRemoveButton)
                    {
                        <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
                            <AntiforgeryToken/>
                            <div>
                                <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider"/>
                                <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey"/>
                                <button type="submit" class="btn btn-primary" title="Удалить вход @login.ProviderDisplayName в ваш аккаунт">Удалить</button>
                            </div>
                        </form>
                    }
                    else
                    {
                        @: &nbsp;
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (otherLogins?.Count > 0)
{
    <h4>Добавить другой сервис для входа.</h4>
    <hr/>
    <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
        <AntiforgeryToken/>
        <div>
            <p>
                @foreach (var provider in otherLogins)
                {
                    <button type="submit" class="btn btn-primary" name="Provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                        @provider.DisplayName
                    </button>
                }
            </p>
        </div>
    </form>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private User user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private string? LoginProvider { get; set; }

    [SupplyParameterFromForm] private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

   protected override async Task OnInitializedAsync()
{
    user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    currentLogins = await UserManager.GetLoginsAsync(user);
    otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
        .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
        .ToList();

    string? passwordHash = null;
    if (UserStore is IUserPasswordStore<User> userPasswordStore)
    {
        passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
    }

    showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

    if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
    {
        await OnGetLinkLoginCallbackAsync();
    }
}

private async Task OnSubmitAsync()
{
    var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
    if (!result.Succeeded)
    {
        RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Внешний вход не был удален.", HttpContext);
    }

    await SignInManager.RefreshSignInAsync(user);
    RedirectManager.RedirectToCurrentPageWithStatus("Внешний вход был удален.", HttpContext);
}

private async Task OnGetLinkLoginCallbackAsync()
{
    var userId = await UserManager.GetUserIdAsync(user);
    var info = await SignInManager.GetExternalLoginInfoAsync(userId);
    if (info is null)
    {
        RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Не удалось загрузить информацию о внешнем входе.", HttpContext);
    }

    var result = await UserManager.AddLoginAsync(user, info);
    if (!result.Succeeded)
    {
        RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Внешний вход не был добавлен. Внешние входы могут быть связаны только с одной учетной записью.", HttpContext);
    }

    // Очистить существующий внешний cookie для обеспечения чистого процесса входа
    await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

    RedirectManager.RedirectToCurrentPageWithStatus("Внешний вход был добавлен.", HttpContext);
}

}