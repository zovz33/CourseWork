@page "/Account/Manage/SetPassword"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Manufacture.Infrastructure.Services

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager 

<PageTitle>Установка пароля</PageTitle>

<h3>Установите свой пароль</h3>

<p class="text-info">
    У вас нет локального имени пользователя и пароля для этого сайта. Добавить локального
    учетную запись, чтобы вы могли войти в систему без внешнего входа.
</p>
<div class="row">
    <div class="col-md-6">
        <RadzenTemplateForm Data="@Input" Submit="@((InputModel args) => { Submit(args); })">
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenPassword @bind-Value="Input.NewPassword" Label="Новый пароль" Style="width: 100%;"/>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenPassword @bind-Value="Input.ConfirmPassword" Label="Подтвердить пароль" Style="width: 100%;"/>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Поставить пароль" Style="width: 100%;"/>
                </RadzenColumn>
            </RadzenRow>
        </RadzenTemplateForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Lighter" class="mt-4">@message</RadzenAlert>
}


@code {
    private string? message;
    private User user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentUserAsync();

        var hasPassword = await UserManager.HasPasswordAsync(user);
        if (hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
    }

    async Task Submit(InputModel args)
    {
        var addPasswordResult = await UserManager.AddPasswordAsync(user, Input.NewPassword!);
        if (!addPasswordResult.Succeeded)
        {
            message = $"Ошибка: {string.Join(",", addPasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        message = "Ваш пароль был установлен.";
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "Длина {0} должна быть не менее {2} и не более {1} символов.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Новый пароль")]
        public string? NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Подтверждение нового пароля")]
        [Compare("NewPassword", ErrorMessage = "Новый пароль и пароль подтверждения не совпадают.")]
        public string? ConfirmPassword { get; set; }
    }

}