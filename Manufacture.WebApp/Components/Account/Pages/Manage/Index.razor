@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Manufacture.Core.Entities.Identity
@using Microsoft.AspNetCore.Identity
@using Manufacture.Infrastructure.Data
@using Manufacture.Infrastructure.Services

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Профиль</PageTitle>

<h3>Профиль</h3>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Введите ваш юзернейм." disabled/>
                <label for="username" class="form-label">Юзернейм</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Введите ваш номер телефона."/>
                <label for="phone-number" class="form-label">Номер телефона</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Address" class="form-control" placeholder="Введите ваш Адресс."/>
                <label for="address" class="form-label">Адресс</label>
            </div>
            <div class="form-floating mb-3">
                <InputDate @bind-Value="Input.DateOfBirth" class="form-control" placeholder="Введите вашу дату рождения."/>
                <label for="dateOfBirth" class="form-label">Дата рождения</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="Введите ваше имя."/>
                <label for="firstName" class="form-label">Имя</label>
            </div>
            <div class="form-floating mb-3">

                <InputText @bind-Value="Input.MiddleName" class="form-control" placeholder="Введите ваше отчество."/>
                <label for="middleName" class="form-label">Отчество</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Введите вашу фамилию."/>
                <label for="lastName" class="form-label">Фамилия</label>
            </div>
            <div class="form-floating mb-3">
                <InputSelect class="form-select" @bind-Value="Input.Gender">
                    <option disabled value="null" hidden="hidden">Не выбрано</option>
                    <option value="M">Мужчина</option>
                    <option value="F">Женщина</option>
                </InputSelect>
                <label for="gender" class="form-label">Пол</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.HomePhone" class="form-control" placeholder="Введите ваш домашний телефон."/>
                <label for="homePhone" class="form-label">Домашний телефон</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Сохранить</button>
        </EditForm>
    </div>
</div>
@inject ApplicationDbContext _context;

@code {

    private User user = default!;
    private string? username;
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        Input.PhoneNumber ??= user.PhoneNumber;
        Input.Address ??= user.Address;
        Input.DateOfBirth ??= user.DateOfBirth;
        Input.FirstName ??= user.FirstName;
        Input.MiddleName ??= user.MiddleName;
        Input.LastName ??= user.LastName;
        Input.Gender ??= user.Gender;
        Input.HomePhone ??= user.HomePhone;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != user.PhoneNumber)
        {
            var result = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!result.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: не удалось сохранить номер телефона.", HttpContext);
            }
        }

        if (Input.Address != user.Address)
        {
            user.Address = Input.Address;
        }

        if (Input.DateOfBirth != user.DateOfBirth)
        {
            user.DateOfBirth = Input.DateOfBirth;
        }

        if (Input.FirstName != user.FirstName)
        {
            user.FirstName = Input.FirstName;
        }

        if (Input.MiddleName != user.MiddleName)
        {
            user.MiddleName = Input.MiddleName;
        }

        if (Input.LastName != user.LastName)
        {
            user.LastName = Input.LastName;
        }

        if (Input.Gender != user.Gender)
        {
            user.Gender = Input.Gender;
        }

        if (Input.HomePhone != user.HomePhone)
        {
            user.HomePhone = Input.HomePhone;
        }

        _context.Update(user);
        await _context.SaveChangesAsync();
        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Ваш профиль успешно обновлен!", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Номер телефона")]
        public string? PhoneNumber { get; set; }

        public string? MobilePhone { get; set; }
        public string? FirstName { get; set; }
        public string? MiddleName { get; set; }
        public string? LastName { get; set; }
        [Display(Name = "Выберите пол")] public string? Gender { get; set; }
        public string? Address { get; set; }
        public string? HomePhone { get; set; }
        public DateTime? DateOfBirth { get; set; }
        public string? ProfileImage { get; set; }
    }

}