@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Manufacture.BusinessLogic.Interfaces
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IEmailSender<User> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IUserService UserService
@rendermode @(new InteractiveServerRenderMode(false))
<PageTitle>Управление почтой</PageTitle>

<h3>Управление почтой</h3>

<div class="row">
    <div class="col-md-6">
        @* <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post"> *@
        @*     <AntiforgeryToken/> *@
        @* </form> *@

        <RadzenTemplateForm Data="@Input" Submit="@((InputModel args) => { Submit(args); })">
            <RadzenRow>
                <RadzenColumn>
                    <RadzenFieldset Text="Управление почтой">
                        <RadzenStack Gap="1rem">

                            @if (isEmailConfirmed)
                            {
                                <RadzenFormField Text="Текущая почта" Variant="Variant.Outlined">
                                    <Start>
                                        <RadzenIcon Icon="mark_email_read"/>
                                    </Start>
                                    <ChildContent>
                                        <InputText @bind-Value="email" disabled="true" style="font-size: 1.5rem;width: 45rem;"/>
                                    </ChildContent>
                                </RadzenFormField>
                            }
                            else
                            {
                                <RadzenFormField Text="Текущая почта" Variant="Variant.Outlined">
                                    <Start>
                                        <RadzenIcon Icon="mail_lock"/>
                                    </Start>
                                    <ChildContent>
                                        <InputText @bind-Value="email" Disabled="true" style="font-size: 1.5rem;width: 45rem;"/>
                                    </ChildContent>
                                </RadzenFormField>
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Отправить письмо с подтверждением" class="btn btn-link" Click="@OnSendEmailVerificationAsync"/>
                            }


                            <RadzenFormField Text="Почта" Variant="Variant.Outlined">
                                <Start>
                                    <RadzenIcon Icon="mail"/>
                                </Start>
                                <ChildContent>
                                    <InputText @bind-Value="Input.NewEmail" Placeholder="Пожалуйста, введите вашу почту." style="font-size: 1.5rem;width: 45rem;"/>
                                </ChildContent>
                            </RadzenFormField>
                            <div Style="width: 20rem;align-self: center">
                                <RadzenButton ButtonType="ButtonType.Submit" Text="Изменить почту" Style="align-content: center;justify-self: center;display: inline;width: 100%"/>
                            </div>

                            <RadzenButton ButtonType="ButtonType.Button" Text="Эмулировать подтверждение новой почты" Click="@EmulateNewEmailConfirmation"/>
                        </RadzenStack>
                    </RadzenFieldset>

                </RadzenColumn>
            </RadzenRow>
        </RadzenTemplateForm>
        @if (!string.IsNullOrEmpty(message))
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Lighter" class="mt-4">@message</RadzenAlert>
        }
    </div>
</div>

@code {
    private string? message;
    private User user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentUserAsync();
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);
        Input.NewEmail ??= email;
    }

    async Task Submit(InputModel args)
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Ваш адрес электронной почты не изменился.";
            return;
        }

        // Проверяем, существует ли пользователь с такой почтой
        var existingUser = await UserManager.FindByEmailAsync(Input.NewEmail);
        if (existingUser != null)
        {
            message = "Пользователь с такой почтой уже существует.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Ссылка с подтверждением для смены почты выслана. Пожалуйста, проверьте свою почту.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Письмо выслано. Пожалуйста, проверьте почту.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Новая почта")]
        public string? NewEmail { get; set; }
    }

    private async Task EmulateNewEmailConfirmation()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Ваш адрес электронной почты не изменился.";
            return;
        }

        var existingUser = await UserManager.FindByEmailAsync(Input.NewEmail);
        if (existingUser != null)
        {
            message = "Пользователь с такой почтой уже существует.";
            return;
        }

        var token = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        var result = await UserManager.ChangeEmailAsync(user, Input.NewEmail, token);

        if (result.Succeeded)
        {
            message = "Новая почта успешно подтверждена (эмуляция).";
            email = Input.NewEmail;
        }
        else
        {
            message = "Не удалось подтвердить новую почту (эмуляция).";
        }
    }

}