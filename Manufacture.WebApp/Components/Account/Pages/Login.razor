@page "/Account/Login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Авторизация</PageTitle>
<RadzenFieldset class="rz-my-12 rz-mx-auto" style="max-width: 600px;align-items: center;align-content: center;align-self: center;border-radius: 10px">
    <HeaderTemplate>
        <span class="d-inline-flex align-items-center align-middle">
            <RadzenIcon Icon="login" class="me-1"/><b>Авторизация</b>
        </span>
    </HeaderTemplate>
    <ChildContent>
        <StatusMessage Message="@errorMessage"/>
        @* <RadzenTemplateForm Method="post" Data="Input" OnValidSubmit="@Submit"> *@
        <EditForm Model="Input" method="post" OnValidSubmit="Submit" FormName="login">
            <DataAnnotationsValidator/>
            <h2>Используйте свой аккаунт для входа</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">

                <RadzenFormField Text="Почта" Variant="Variant.Outlined">
                    <Start>
                        <RadzenIcon Icon="alternate_email"/>
                    </Start>
                    <ChildContent>
                        @* <RadzenTextBox @bind-Value="Input.Email" AutoComplete="true" aria-required="true" placeholder="name@example.com"/> *@
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                    </ChildContent>
                </RadzenFormField>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <RadzenFormField Text="Пароль" Variant="Variant.Outlined">
                    <Start>
                        <RadzenIcon Icon="password"/>
                    </Start>
                    <ChildContent>
                        @* <RadzenPassword @bind-Value="Input.Password" AutoComplete="true" type="password"/> *@
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
                    </ChildContent>
                </RadzenFormField>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="checkbox mb-3">
                <label class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                    Запомнить меня
                </label>
            </div>
            <div>
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="input" Text="Войти"/>
            </div>

            <div>
                <p>
                    <a href="Account/ForgotPassword">Забыли свой пароль?</a>
                </p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Зарегистрироваться
                    </a>
                </p>
                <p>
                    <a href="Account/ResendEmailConfirmation">Подтверждение почты.</a>
                </p>
            </div>
            @* </RadzenTemplateForm>  *@
        </EditForm>
    </ChildContent>
</RadzenFieldset>
<div class="col-md-6 col-md-offset-2">
    <section>
        <h3>Используйте другой сервис для авторизации.</h3>
        <hr/>
        <ExternalLoginPicker/>
    </section>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel? Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    async Task Submit()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Пользователь авторизован.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Аккаунт пользователя заблокирован.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Неудачная попытка входа.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Запомнить меня")] public bool RememberMe { get; set; }
    }

}