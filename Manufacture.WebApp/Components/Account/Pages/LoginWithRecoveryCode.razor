@page "/Account/LoginWithRecoveryCode"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Проверка кода восстановления</PageTitle>

<h1>Проверка кода восстановления</h1>
<hr/>
<StatusMessage Message="@message"/>
<p>
    Вы запросили вход с кодом восстановления. Этот логин не будет запомнен, пока вы не предоставите
    код приложения для аутентификации при входе в систему или отключите 2FA и войдите снова.
</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="RecoveryCode"/>
                <label for="recovery-code" class="form-label">Код восстановления</label>
                <ValidationMessage For="() => Input.RecoveryCode" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Вход</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private User user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Невозможно загрузить пользователя двухфакторной аутентификации.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("Пользователь с ID '{UserId}' вошел с помощью кода восстановления.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Аккаунт пользователя заблокирован.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Для пользователя с идентификатором введен неверный код восстановления. '{UserId}' ", userId);
            message = "Ошибка: введен неверный код восстановления.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Код восстановления")]
        public string RecoveryCode { get; set; } = "";
    }

}