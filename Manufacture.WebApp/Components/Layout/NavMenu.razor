@implements IDisposable 
@inject NavigationManager NavigationManager

<RadzenSidebar Responsive="false" Style="width: max-content">
    <RadzenPanelMenu DisplayStyle="@(true ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="true">
        <RadzenPanelMenuItem Text="Основная" Icon="home" Path="/"/>
        <AuthorizeView>
            <Authorized>
                <RadzenPanelMenuItem Text="Dashboard" Icon="dashboard" Path="dashboard"/>
                <RadzenPanelMenuItem Text="Пользователи" Icon="group" Path="users"/>
                <RadzenPanelMenuItem Text="Роли" Icon="add_moderator" Path="roles"/>
                <RadzenPanelMenuItem Text="Продукция на складе" Icon="cooking" Path="products"/>
                <RadzenPanelMenuItem Text="Продукция для заказа" Icon="view_list" Path="orderproduct"/>
                <RadzenPanelMenuItem Text="Заказы" Icon="orders" Path="orders"/>
                <RadzenPanelMenuItem Text="Материалы" Icon="inventory" Path="materials"/>
                <RadzenPanelMenuItem Text="Личный кабинет" Icon="account_box" Path="account/manage"/>
            </Authorized>
            <NotAuthorized>
                <RadzenPanelMenuItem Text="Регистрация" Icon="app_registration" Path="Account/Register"/>
                <RadzenPanelMenuItem Text="Авторизация" Icon="login" Path="Account/Login"/>
            </NotAuthorized>
        </AuthorizeView>
    </RadzenPanelMenu>
</RadzenSidebar>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}