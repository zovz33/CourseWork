@page "/role/create" 
@page "/role/update/{id:int?}" 
@using Manufacture.BusinessLogic
@using Manufacture.BusinessLogic.Interfaces
@using Manufacture.Core.Entities
@using Manufacture.Core.Entities.Identity
@using Microsoft.AspNetCore.Identity
@using System.Reflection
@using System.Security.Claims
@inject RoleManager<Role> RoleManager
@inject IRoleService RoleService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(false))

@if (NavigationManager.Uri.Contains("/role/create"))
{
    <PageTitle>Добавьте новую роль</PageTitle>
    <h3>Добавьте новую роль</h3>
}
else
{
    <PageTitle>Изменение данных у роли @CurrentRole.Name</PageTitle>
    <h3>Измените роль @CurrentRole.Name</h3>
}
<NavLink class="btn " href="/roles">
    <RadzenIcon Icon="keyboard_backspace" Style=".btn:hover {background-color: bisque;};align-items: center"/>
</NavLink>
@if (!string.IsNullOrEmpty(Message))
{
    <RadzenAlert Shade="Shade.Lighter" AlertStyle=@(Message.Contains("Ошибка") ? AlertStyle.Danger : AlertStyle.Success) class="mt-4">@Message</RadzenAlert>
}
<RadzenTemplateForm Data="@CurrentRole" Submit="@((Role args) => { Submit(args); })">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Информация о роли">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <div>
                                <RadzenFormField Text="Название роли" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="lock"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentRole.Name"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Описание" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="description"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentRole.Description"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div class="col-md-12">
                                <RadzenFieldset Text="Права доступа">
                                    @foreach (var group in GlobalPermissions.GroupBy(p => p.Key.Split('.')[0]))
                                    {
                                        <div style="margin-bottom: 1.5rem;">
                                            <RadzenText TextStyle="TextStyle.Subtitle2">@GetGroupName(group.Key)</RadzenText>
                                            <RadzenSelectBar @bind-Value="@SelectedPermissions" TextProperty="Value" ValueProperty="Key" Data="@group.ToDictionary(p => p.Key, p => p.Value)" Multiple="true" Style="margin-top: 0.5rem;"/>
                                        </div>
                                    }
                                </RadzenFieldset>
                            </div>
                            <StatusMessage Message="@Message"/>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Сохранить"/>
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Отменить" Click="@Cancel"/>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter] public int? id { get; set; }

    public Role CurrentRole { get; set; } = new(); 
    private string? Message;

    private IEnumerable<string> SelectedPermissions { get; set; } = new List<string>();
    private Dictionary<string, string> GlobalPermissions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        GlobalPermissions = await RoleService.GetGlobalPermissions();
        if (id.HasValue)
        {
            CurrentRole = await RoleService.GetRoleById(id);
            var rolePermissions = await RoleManager.GetClaimsAsync(CurrentRole);

            SelectedPermissions = rolePermissions
                .Select(c => c.Value)
                .ToList();
        }
    }

    private async Task Submit(Role args)
    {
        if (string.IsNullOrEmpty(args.Name) || args.Name.Length < 5)
        {
            Message = "Ошибка: Название роли должно содержать не менее 5 символов.";
            return;
        }

        if (SelectedPermissions == null || !SelectedPermissions.Any())
        {
            Message = "Ошибка: Вы должны выбрать хотя бы одно право доступа для роли.";
            return;
        }

        try
        {
            if (!string.IsNullOrEmpty(args.Name))
            {
                var existingRole = await RoleManager.FindByNameAsync(args.Name);
                if (existingRole != null && existingRole.Id != args.Id)
                {
                    Message = "Ошибка: Роль с таким именем уже существует.";
                    return;
                }
            }
            if (!id.HasValue)
            {
                await RoleService.Add(args, SelectedPermissions);
                Message = "Роль успешно создана.";
            }
            else
            {
                // Логика для редактирования информации о роли и её правах
                if (CurrentRole != null)
                {
                    await RoleService.Update(CurrentRole, SelectedPermissions);
                    Message = "Роль успешно обновлена.";
                }
                else
                {
                    Message = "Роль не найдена.";
                }
            }

            NavigationManager.NavigateTo("/roles");
        }
        catch (Exception ex)
        {
            Message = $"Произошла ошибка при обработке данных роли. Попробуйте позже. Ошибка: {ex.Message}";
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/roles");
    }

    private string GetGroupName(string groupName)
    {
        var nestedType = typeof(Permissions).GetNestedType(groupName, BindingFlags.Public | BindingFlags.Static);
        if (nestedType != null)
        {
            return nestedType.GetDisplayName();
        }

        return groupName;
    }
}