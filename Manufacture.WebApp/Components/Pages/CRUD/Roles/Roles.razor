@page "/roles"
@using System.Reflection
@using Manufacture.BusinessLogic.Interfaces
@using Manufacture.Core.Entities
@using Manufacture.Core.Entities.Identity
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel
@inject RoleManager<Role> RoleManager
@inject NavigationManager NavigationManager
@inject IRoleService RoleService; 
@inject IUserService UserService; 
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]
@* @attribute [Authorize(Policy = "Permissions10")] *@
<PageTitle>Роли</PageTitle>

<h1>Роли</h1>

@if (RolesL == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <RadzenButton Icon="add" class="rz-ripple" Click="@(CreateRole)" ButtonStyle="ButtonStyle.Success" Style="margin: 15px"/>
    <div style="display: flex; flex-direction: column; margin: 16px;max-width: 95rem">

        <RadzenDataGrid Data="@RolesL" TItem="Role" AllowColumnResize="true" GridLines="DataGridGridLines.Vertical"
                        AllowColumnReorder="false" PagerHorizontalAlign="HorizontalAlign.Center"
                        AllowPaging="true" AllowFiltering="true" FilterMode="FilterMode.Simple"
                        FilterPopupRenderMode="PopupRenderMode.OnDemand" IsNullText="-" ColumnWidth="120"
                        AllowSorting="true" AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true"
                        Style="width: 100%; margin: 0 15px; max-width: 100%; border-radius: 16px;align-items: center;text-align: center;
                         ">
            <Columns>
                <RadzenDataGridColumn TItem="Role" Frozen="true" Width="80px" Property="Id" Title="#" TextAlign="TextAlign.Center" Sortable="true" Filterable="true"/>
                <RadzenDataGridColumn TItem="Role" Context="role" Sortable="false" Filterable="false" Frozen="true" Width="120px" FrozenPosition="FrozenColumnPosition.Right">
                    <Template>
                        <RadzenButton Icon="edit" class="rz-ripple" Click="@(() => UpdateRole(role.Id))" ButtonStyle="ButtonStyle.Primary" Style="margin-right: 8px;"></RadzenButton>
                        <RadzenButton Icon="delete" class="rz-ripple" Click="@(() => DeleteRole(role.Id))" ButtonStyle="ButtonStyle.Danger"></RadzenButton>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Role" Property="Name" Title="Название" Sortable="true">
                    <FooterTemplate>
                        Всего ролей: <b>@RolesL.Count()</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Role" Property="Description" Title="Описание" Sortable="true"/>

                <RadzenDataGridColumn TItem="Role" Property="Name" Title="Права" Sortable="false" Filterable="false">
                    <Template Context="role">
                        @if (rolePermissions.TryGetValue(role.Id, out var permissions) && permissions.Any())
                        {
                            <RadzenDropDown Data="@permissions.GroupBy(p => p.Split('.')[0]).Select(g => new { GroupName = GetGroupName(g.Key), Permissions = g.Select(p => p.Split('.')[1]) })"
                                            TextProperty="GroupName" ValueProperty="Permissions" TValue="string" ReadOnly="true"
                                            AllowClear="false" Placeholder="Просмотр прав роли" AllowSelectAll="false"
                                            Style="width: 100%; max-width: 400px;text-align-all: center;text-align: center;align-self: center;align-content: center;">
                                <Template>
                                    <div>
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Style="font-weight: bold;">@context.GroupName</RadzenText>
                                        <div>
                                            @foreach (var p in context.Permissions)
                                            {
                                                <RadzenText TagName="TagName.H5">@p</RadzenText>
                                            }
                                        </div>
                                    </div>
                                </Template>
                            </RadzenDropDown>
                        }
                        else
                        {
                            <RadzenText TagName="TagName.H4">Нет прав</RadzenText>
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Role" Title="Создание" Sortable="false" Filterable="false">
                    <Template Context="role">
                        <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0">
                            @((role.CreatedBy.HasValue && role.CreatedBy.Value != 0 && CreatedByNames.TryGetValue(role.CreatedBy.Value, out string createdByName)) ? createdByName : "Система")
                            </RadzenText>
                        <RadzenText TextStyle="TextStyle.Caption">@role.CreatedDateTime</RadzenText>
                    </Template>
                    <FooterTemplate>
                        Последнее:<b>@string.Format("{0:d}", RolesL.OrderByDescending(o => o.CreatedDateTime).FirstOrDefault()?.CreatedDateTime)</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Role" Title="Редактирование" Sortable="false" Filterable="false">
                    <Template Context="role">
                        <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0">
                            @((role.UpdatedBy.HasValue && role.UpdatedBy.Value != 0 && UpdatedByNames.TryGetValue(role.UpdatedBy.Value, out string updatedByName)) ? updatedByName : "Система")
                        </RadzenText>

                        <RadzenText TextStyle="TextStyle.Caption">@role.UpdatedDateTime</RadzenText>
                    </Template>
                    <FooterTemplate>
                        Последнее:<b>@string.Format("{0:d}", RolesL.OrderByDescending(o => o.UpdatedDateTime).FirstOrDefault()?.UpdatedDateTime)</b>
                    </FooterTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
}

@inject UserManager<User> UserManager

@code {
    private List<Role> RolesL; 
    private readonly Dictionary<int, List<string>> rolePermissions = new();
    private Dictionary<string, string> GlobalPermissions { get; set; } = new();
    private Dictionary<int, string> CreatedByNames = new();
    private Dictionary<int, string> UpdatedByNames = new();
    protected override async Task OnInitializedAsync()
    {
        GlobalPermissions = await RoleService.GetGlobalPermissions();
        
        RolesL = await RoleService.GetRoles();
        
        foreach (var role in RolesL)
        {
            rolePermissions[role.Id] = await RoleService.GetPermissionsByRoleIdAsync(role.Id);
        }

        var users = await UserService.GetUsers(); 
        foreach (var user in users)
        {
            CreatedByNames[user.Id] = user.UserName;
            UpdatedByNames[user.Id] = user.UserName;
        }
        
         
    }

    private void CreateRole()
    {
        NavigationManager.NavigateTo("/role/create");
    }

    private void UpdateRole(int id)
    {
        NavigationManager.NavigateTo($"/role/update/{id}");
    }

    private async Task DeleteRole(int id)
    {
        await RoleService.Delete(id);
        RolesL = await RoleService.GetRoles();
    }

    private string GetGroupName(string groupName)
    {
        var nestedType = typeof(Permissions).GetNestedType(groupName, BindingFlags.Public | BindingFlags.Static);
        if (nestedType != null)
        {
            var displayNameAttribute = nestedType.GetCustomAttribute<DisplayNameAttribute>();
            return displayNameAttribute?.DisplayName ?? nestedType.Name;
        }

        return groupName;
    }

}