@page "/user/create" 
@page "/user/update/{id:int?}" 
@using Manufacture.Core.Entities.Identity
@using Manufacture.BusinessLogic.Interfaces
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject RoleManager<Role> RoleManager
@inject UserManager<User> UserManager

@rendermode @(new InteractiveServerRenderMode(false))
@if (NavigationManager.Uri.Contains("/user/create"))
{
    <PageTitle>Добавьте нового пользователя</PageTitle>
    <h3>Добавьте нового пользователя</h3>
}
else if (NavigationManager.Uri.Contains("/user/update/{id:int}"))
{
    <PageTitle>Изменение данных у @CurrentUser.UserName</PageTitle>
    <h3>Измените @CurrentUser.UserName</h3>
}
<NavLink class="btn " href="/users">
    <RadzenIcon Icon="keyboard_backspace" Style=".btn:hover {background-color: bisque;};align-items: center"/>
</NavLink>
@if (!string.IsNullOrEmpty(Message))
{
    <RadzenAlert Shade="Shade.Lighter" AlertStyle=@(Message.Contains("Ошибка") ? AlertStyle.Danger : AlertStyle.Success) class="mt-4">@Message</RadzenAlert>
}
<RadzenTemplateForm Data="@CurrentUser" Submit="@((User args) => { Submit(args); })">
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Информация о пользователе">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <div>
                                <RadzenFormField Text="Юзернейм" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="badge"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentUser.UserName"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Пароль" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="password"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentUser.PasswordHash"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Почта" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="mail"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentUser.Email"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Имя" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="assignment_ind"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentUser.FirstName"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Отчество" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="assignment_ind"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentUser.MiddleName"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Фамилия" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="assignment_ind"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="CurrentUser.LastName"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Пол" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="wc"/>
                                    </Start>
                                    <ChildContent>
                                        <InputSelect @bind-Value="CurrentUser.Gender" Style="height: 40px;">
                                            <option value="null" hidden="hidden">Не выбрано</option>
                                            <option value="M">Мужчина</option>
                                            <option value="F">Женщина</option>
                                        </InputSelect>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Адресс" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="send"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenTextArea @bind-Value="CurrentUser.Address"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Домашний телефон" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="contact_phone"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenNumeric @bind-Value="CurrentUser.HomePhone" ShowUpDown="false" Placeholder="Введите домашний телефон" class="form-control"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Мобильный телефон" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="smartphone"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenMask Mask="+* (***) ***-**-**" CharacterPattern="[0-9]" Placeholder="+0 (000) 000-00-00" class="form-control" Name="Phone" id="PhoneNumber" @bind-Value="CurrentUser.PhoneNumber" Style="width: 100%;" aria-label="Phone"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div>
                                <RadzenFormField Text="Дата рождения" Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                                    <Start>
                                        <RadzenIcon Icon="cake"/>
                                    </Start>
                                    <ChildContent>
                                        <RadzenDatePicker @bind-Value="@CurrentUser.DateOfBirth" DateFormat="MM/dd/yyyy" id="DateOfBirth" InitialViewDate="DateTime.Now.AddYears(-20)" Min="DateTime.Today.AddYears(-90)" Max="DateTime.Today.AddYears(-10)"/>
                                    </ChildContent>
                                </RadzenFormField>
                            </div>
                            <div class="col-md-4 p-3">
                                <RadzenCard Style="width: 500px">
                                    <RadzenUpload @ref="upload" ChooseText="Выбрать фото профиля" Icon="account_box" Auto="false" Multiple="true" Url="upload/multiple" Change=@(args => OnChange(args, "Manual Upload"))
                                                  id="ProfileImage" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "select file" } })" Progress=@(args => OnProgress(args, "Manual Upload")) class="w-100"/>
                                    <RadzenButton Text="Сохранить фото" Click="@(args => upload.Upload())" class="d-block mt-4"/>
                                </RadzenCard>
                            </div>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Расширенная информация">
                    <div class="rz-text-align-center">
                        <RadzenFormField Text="Email подтвержден" Variant="Variant.Outlined" Style="margin: 5px 0;width: 350px">
                            <ChildContent>
                                <RadzenCheckBox id="EmailComfirmed" @bind-Value="CurrentUser.EmailConfirmed"/>
                            </ChildContent>
                        </RadzenFormField>
                    </div>
                    <div class="rz-text-align-center">
                        <RadzenFormField Text="Номер телефона подтвержден" Variant="Variant.Outlined" Style="margin: 5px 0;width: 350px">
                            <ChildContent>
                                <RadzenCheckBox id="PhoneNumberConfirmed" @bind-Value="CurrentUser.PhoneNumberConfirmed"/>
                            </ChildContent>
                        </RadzenFormField>
                    </div>
                    <div class="rz-text-align-center">
                        <RadzenFormField Text="Двухфакторная аутентификация вкл/выкл" Variant="Variant.Outlined" Style="margin: 5px 0;width: 350px">
                            <ChildContent>
                                <RadzenCheckBox id="TwoFactorEnabled" @bind-Value="CurrentUser.TwoFactorEnabled"/>
                            </ChildContent>
                        </RadzenFormField>
                    </div>
                    <RadzenFormField Text="Заблокировать до..." Variant="Variant.Outlined" Style="width: 750px; margin: 5px 0;">
                        <Start>
                            <RadzenIcon Icon="lock_person"/>
                        </Start>
                        <ChildContent>
                            <RadzenDatePicker id="LockoutEnd" @bind-Value="@CurrentUser.LockoutEnd" InitialViewDate="DateTime.UtcNow" DateFormat="yyyy/MM:dd HH:mm" Min="DateTime.UtcNow" Max="DateTime.Today.AddYears(10)"/>
                        </ChildContent>
                    </RadzenFormField>
                    <RadzenFormField Text="Роли пользователя" AllowFloatingLabel="false" Variant="Variant.Outlined" Style="margin-top: 0.5rem;">
                        <RadzenSelectBar Multiple="true" Data="@AllRoles" @bind-Value="@selectedRoles" TextProperty="Name" ValueProperty="Id" Style="flex-wrap: wrap; max-width: 100%;"/>
                    </RadzenFormField>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Сохранить"/>
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Отменить" Click="@Cancel"/>
    </RadzenStack>
</RadzenTemplateForm>


@code {
    [Parameter] public int? id { get; set; }
    public User CurrentUser { get; set; } = new();
    private string? Message;
    RadzenUpload upload;
    public List<string> AllRoles { get; set; } = new();

    IEnumerable<string> selectedRoles = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        // var user = await UserManager.FindByIdAsync(id.ToString());
        var user = await UserService.GetUserById(id);
        if (id != null)
            CurrentUser = user;
        var roles = RoleManager.Roles.Select(r => r.Name).ToList();
        AllRoles = roles;

        // Получаем список ролей пользователя, если это обновление пользователя
        if (id.HasValue)
        {
            if (user != null)
            {
                var userRoles = await UserManager.GetRolesAsync(user);
                selectedRoles = userRoles;
            }
        }
    }

    private async Task RolesUpdate()
    {
        var roles = await UserManager.GetRolesAsync(CurrentUser);
        var rolesToAdd = selectedRoles.Except(roles);
        var rolesToRemove = roles.Except(selectedRoles);

        await UserManager.AddToRolesAsync(CurrentUser, rolesToAdd);
        await UserManager.RemoveFromRolesAsync(CurrentUser, rolesToRemove);
    }

    async Task Submit(User args)
    {
        try
        {
            if (CurrentUser.DateOfBirth.HasValue)
            {
                CurrentUser.DateOfBirth = DateTime.SpecifyKind(CurrentUser.DateOfBirth.Value, DateTimeKind.Utc);
            }

            if (CurrentUser.LockoutEnd.HasValue)
            {
                CurrentUser.LockoutEnd = CurrentUser.LockoutEnd.Value.ToUniversalTime();
            }

            // Простая валидация данных формы
            var validationContext = new ValidationContext(args, serviceProvider: null, items: null);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(args, validationContext, validationResults, validateAllProperties: true);

            if (!isValid)
            {
                // Если данные не прошли валидацию, отобразить сообщения об ошибках
                Message = string.Join("\n", validationResults.Select(r => r.ErrorMessage));
                return;
            }

            if (string.IsNullOrEmpty(args.UserName) || args.UserName.Length < 5)
            {
                Message = "Ошибка: Юзернейм должен содержать не менее 5 символов.";
                return;
            }

            if (string.IsNullOrEmpty(args.PasswordHash) || args.PasswordHash.Length < 5)
            {
                Message = "Ошибка: Пароль должен содержать не менее 5 символов.";
                return;
            }

            if (string.IsNullOrEmpty(args.Email) || args.Email.Length < 5)
            {
                Message = "Ошибка: Почта должна содержать не менее 5 символов.";
                return;
            }

            // Остальная логика обработки формы при успешной валидации
            if (id is not null)
            {
                // Обновляем данные пользователя
                await UserService.UpdateUser(CurrentUser, (int)id);
                await RolesUpdate();

                Message = "Данные пользователя успешно обновлены.";
            }
            else
            {
                await UserService.AddUser(CurrentUser);

                Message = "Новый пользователь успешно добавлен.";
            }

            Message = id != null ? "Данные пользователя успешно обновлены." : "Новый пользователь успешно добавлен.";
            NavigationManager.NavigateTo("/users");
        }
        catch (Exception ex)
        {
            Message = $"Произошла ошибка при обработке данных пользователя. Попробуйте позже. Ошибка: {ex.Message}";
        }
    }


    void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }

    void OnProgress(UploadProgressArgs args, string name)
    {
        Console.WriteLine($"{args.Progress}% '{name}' / {args.Loaded} of {args.Total} bytes.");

        if (args.Progress == 100)
        {
            foreach (var file in args.Files)
            {
                Console.WriteLine($"Uploaded: {file.Name} / {file.Size} bytes");
            }
        }
    }

    void OnChange(UploadChangeEventArgs args, string name)
    {
        foreach (var file in args.Files)
        {
            Console.WriteLine($"File: {file.Name} / {file.Size} bytes");
        }

        Console.WriteLine($"{name} changed");
    }


    void OnError(UploadErrorEventArgs args, string name)
    {
        Console.WriteLine($"{args.Message}");
    }


}