@page "/user/create" 
@page "/user/update/{id:int?}" 
@using Manufacture.Core.Entities.Identity
@using Manufacture.BusinessLogic.Interfaces
@using System.Security.Claims
@inject IUserService UserService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@if (NavigationManager.Uri.Contains("/user/create"))
{
    <PageTitle>Добавьте нового пользователя</PageTitle>
    <h3>Добавьте нового пользователя</h3>
}
else if (NavigationManager.Uri.Contains("/user/update/{id:int}"))
{
    <PageTitle>Изменение данных у @CurrentUser.UserName</PageTitle>
    <h3>Измените @CurrentUser.UserName</h3>
}
<NavLink class="btn btn-outline-secondary" href="/users">
    <i class="fa fa-arrow-left"></i> Назад
</NavLink>
<EditForm Model="CurrentUser" OnSubmit="HandleSubmit">
    <div>
        <div>
            <label for="UserName">Юзернейм</label>
            <InputText id="UserName" @bind-Value="CurrentUser.UserName" class="form-control"/>
        </div>
        <div>
            <label for="PasswordHash">Пароль</label>
            <InputText id="PasswordHash" @bind-Value="CurrentUser.PasswordHash" class="form-control"/>
        </div>
        <div>
            <label for="FirstName">Имя</label>
            <InputText id="FirstName" @bind-Value="CurrentUser.FirstName" class="form-control"/>
        </div>
        <div>
            <label for="MiddleName">Отчество</label>
            <InputText id="MiddleName" @bind-Value="CurrentUser.MiddleName" class="form-control"/>
        </div>
        <div>
            <label for="LastName">Фамилия</label>
            <InputText id="LastName" @bind-Value="CurrentUser.LastName" class="form-control"/>
        </div>
        <div>
            <label for="Gender">Пол</label>
            <InputSelect id="Gender" class="form-select" @bind-Value="CurrentUser.Gender">
                <option value="null" hidden="hidden">Не выбрано</option>
                <option value="M">Мужчина</option>
                <option value="F">Женщина</option>
            </InputSelect>
        </div>
        <div>
            <label for="Address">Адрес</label>
            <InputTextArea id="Address" @bind-Value="CurrentUser.Address" class="form-control"/>
        </div>
        <div>
            <label for="HomePhone">Домашний телефон</label>
            <InputText id="HomePhone" @bind-Value="CurrentUser.HomePhone" class="form-control"/>
        </div>
        <div>
            <label for="PhoneNumber">Мобильный телефон</label>
            <InputText id="PhoneNumber" @bind-Value="CurrentUser.PhoneNumber" class="form-control"/>
        </div>
        <div>
            <label for="DateOfBirth">Дата рождения</label>
            <InputDate id="DateOfBirth" @bind-Value="CurrentUser.DateOfBirth" class="form-control"/>
        </div>
        <div>
            <label for="ProfileImage">Профиль</label>
            <InputFile id="ProfileImage" OnChange="@HandleProfileImageSelected" class="form-control"/>
        </div>
    </div>
         <StatusMessage Message="@Message"/>
         <ValidationSummary @bind-Errors="validationErrors" />
    <button type="submit" class="btn btn-primary">Сохранить</button>
</EditForm>

@code {
    [Parameter] public int? id { get; set; }

    public User CurrentUser { get; set; } = new();
    public List<string> validationErrors = new List<string>();
    private string? Message;
    
    int GetCurrentUserId()
    {
        var userIdClaim = HttpContextAccessor.HttpContext?.User.FindFirst(ClaimTypes.NameIdentifier);
        Console.WriteLine("ID: "+  userIdClaim);
        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
        {
            return userId;
        }
        return 0;
    }


    protected override async Task OnInitializedAsync()
    {
            var user = await UserService.GetUserById(id);
            if (id != null)
                CurrentUser = user;
    }

    async Task HandleSubmit()
    {
        validationErrors.Clear();
        if (CurrentUser.UserName == null || CurrentUser.UserName.Trim() == "")
            validationErrors.Add("Юзернейм является обязательным полем.");
        
        if (validationErrors.Any())
        {
            return;
        }

        try
        {
            int adminId = GetCurrentUserId();
            Console.WriteLine("ДАННЫЕ "+adminId);
            if (id is not null)
            {
                await UserService.UpdateUser(CurrentUser, (int)id, adminId);
                Message = "Данные пользователя успешно обновлены.";
            }
            else
            {
                await UserService.AddUser(CurrentUser, adminId);
                Message = "Новый пользователь успешно добавлен.";
            }
            NavigationManager.NavigateTo("/users");
        }
        catch (Exception ex)
        {
            Message = $"Произошла ошибка при обработке данных пользователя. Попробуйте позже. Ошибка: {ex.Message}";
        }
    }

    void HandleProfileImageSelected(InputFileChangeEventArgs e)
    {
        // Handle profile image upload here
    }

}