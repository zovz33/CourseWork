@page "/materials"
@using Manufacture.Core.Entities
@using Manufacture.BusinessLogic.Interfaces
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

<h1>Материалы</h1>

@if (MaterialsL == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    @if (MaterialsL == null)
    {
        <p>
            <em>Загрузка...</em>
        </p>
    }
    else
    {
        <RadzenButton Icon="add" class="rz-ripple" Click="@CreateMaterial" ButtonStyle="ButtonStyle.Success" Style="margin: 15px"/>
        <div style="display: flex; flex-direction: column; margin: 16px;max-width: 95rem">
            <RadzenDataGrid Data="@MaterialsL" TItem="RawMaterial" AllowColumnResize="true"
                            AllowColumnReorder="false" PagerHorizontalAlign="HorizontalAlign.Center"
                            AllowPaging="true" AllowFiltering="true" FilterMode="FilterMode.Simple"
                            ColumnWidth="200px" FilterPopupRenderMode="PopupRenderMode.OnDemand" IsNullText="-"
                            AllowSorting="true" AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" 
                            Style="width: 100%; margin: 0 15px; max-width: 100%; border-radius: 16px;">
                <Columns>
                    <RadzenDataGridColumn TItem="RawMaterial" Property="Id" Frozen="true" Width="80px" Title="#" TextAlign="TextAlign.Center" Sortable="true" Filterable="true"/>
                    <RadzenDataGridColumn TItem="RawMaterial" Sortable="false" Filterable="false" Frozen="true" Width="120px" FrozenPosition="FrozenColumnPosition.Right">
                        <Template Context="material">
                            <RadzenButton class="rz-ripple" Icon="edit" ButtonStyle="ButtonStyle.Primary" Click="@(() => EditMaterial(material.Id))" Style="margin-right: 8px;"/>
                            <RadzenButton class="rz-ripple" Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteMaterial(material.Id))"/>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RawMaterial" Property="Name" Title="Название" TextAlign="TextAlign.Center"/>
                    <RadzenDataGridColumn TItem="RawMaterial" Property="Quantity" Title="Количество" Sortable="true" Filterable="false" TextAlign="TextAlign.Center"/>
                    <RadzenDataGridColumn TItem="RawMaterial" Property="Price" Title="Цена за кило" Sortable="true" Filterable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @($"{data.Price} ₽")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RawMaterial" Title="Создание" Sortable="false" Filterable="false">
                        <Template Context="role">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0">
                                @((role.CreatedBy.HasValue && role.CreatedBy.Value != 0 && CreatedByNames.TryGetValue(role.CreatedBy.Value, out string createdByName)) ? createdByName : "Система")
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Caption">@role.CreatedDateTime</RadzenText>
                        </Template>
                        <FooterTemplate>
                            Последнее:<b>@string.Format("{0:d}", MaterialsL.OrderByDescending(o => o.CreatedDateTime).FirstOrDefault()?.CreatedDateTime)</b>
                        </FooterTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RawMaterial" Title="Редактирование" Sortable="false" Filterable="false">
                        <Template Context="role">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0">
                                @((role.UpdatedBy.HasValue && role.UpdatedBy.Value != 0 && UpdatedByNames.TryGetValue(role.UpdatedBy.Value, out string updatedByName)) ? updatedByName : "Система")
                            </RadzenText>

                            <RadzenText TextStyle="TextStyle.Caption">@role.UpdatedDateTime</RadzenText>
                        </Template>
                        <FooterTemplate>
                            Последнее:<b>@string.Format("{0:d}", MaterialsL.OrderByDescending(o => o.UpdatedDateTime).FirstOrDefault()?.UpdatedDateTime)</b>
                        </FooterTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    }
}

@inject IMaterialService MaterialService
@inject IUserService UserService
@code {
    private List<RawMaterial> MaterialsL;
    private Dictionary<int, string> CreatedByNames = new();
    private Dictionary<int, string> UpdatedByNames = new();
    protected override async Task OnInitializedAsync()
    {
        MaterialsL = await MaterialService.GetAllMaterialsAsync();
        
        var users = await UserService.GetUsers(); 
        foreach (var user in users)
        {
            CreatedByNames[user.Id] = user.UserName;
            UpdatedByNames[user.Id] = user.UserName;
        }
    }

    private void CreateMaterial()
    {
        NavigationManager.NavigateTo("/material/create");
    }

    private void EditMaterial(int id)
    {
        NavigationManager.NavigateTo($"/material/update/{id}");
    }

    private async Task DeleteMaterial(int id)
    {
        await MaterialService.DeleteMaterialAsync(id);
        MaterialsL = await MaterialService.GetAllMaterialsAsync();
    }

}